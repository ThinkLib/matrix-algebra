load lib/gen-tree.maude
load simplify.maude

***(
view Statement from TRIV to COMPUTE is
  sort Elt to Statement .
endv
)
mod COMPUTE is 
    protecting MATRIX-SIMPLIFY .
    *** protecting GEN-TREE{Statement} .
    protecting STRING .

    *** sort Statement .
    sort Array .
    sort Exp
    sort Arg .
    subsort String < Arg .

    subsort Qid < Array .

    *** Some utility functions
    var X : MatrixExpr .
    op TRANS : MatrixExpr -> Char . 
    eq TRANS(transpose(X)) = "T" .
    eq TRANS(X) = "N" [owise] . 

    op LD : MatrixExpr -> Nat .
    eq LD(transpose(X)) = rows(X) . 
    eq LD(X) = rows(X) [owise] .

    op Side : MatrixExpr MatrixExpr Context -> Char .
    ceq Side(A, B, Facts) = "L" if Facts => A is symmetric .
    ceq Side(A, B, Facts) = "R" if Facts => B is symmetric .

    op UPLO : Situation -> Char .
    ceq UPLO(X with Facts) = "U" if Facts => X is upper-triangular .
    ceq UPLO(X with Facts) = "L" if Facts => X is lower-triangular .

    op DIAG : Situation -> Char .
    ceq DIAG(X with Facts) = "U" if Facts => X is unit-triangular .
    eq DIAG(X with Facts)  = "N" [owise] .


    vars A B C D : MatrixExpr .
    vars a b c d e f g : Char .
    vars n m o p q : Nat .
    vars alpha beta : Float .
    var Facts : Context .
    var Q : Qid .

    op ? : -> Char .

    *** SUBROUTINE SGEMM(TRANSA,TRANSB,M,N,K,ALPHA,A,LDA,B,LDB,BETA,C,LDC)
    op GEMM : Char Char Nat Nat Nat Float Array Nat Array Nat Float Array Nat
           -> Array .
    *** SUBROUTINE SSYMM(SIDE,UPLO,M,N,ALPHA,A,LDA,B,LDB,BETA,C,LDC)
    op SYMM : Char Char Nat Nat Float Array Nat Array Nat Float Array Nat
           -> Array .
    
    *** SUBROUTINE STRSM(SIDE,UPLO,TRANSA,DIAG,M,N,ALPHA,A,LDA,B,LDB)
    op TRSM : Char Char Char Char Nat Nat Float Array Nat Array Nat 
           -> Array .

    op compute : Situation -> Array .

    *** This should be replaced with something nicer.
    rl [Symbol] : compute(matrix(Q, n by m) with Facts) => Q .

    rl [GEMM] : compute(alpha A B + beta C with Facts) 
              => GEMM(TRANS(A), TRANS(B), rows(A), cols(B), cols(A), alpha,
              compute(A with Facts), LD(A), compute(B with Facts), LD(B), beta, 
              compute(C with Facts), LD(C)) .

    crl [SYMM] : compute(alpha A B + beta C with Facts) 
             => SYMM(Side(A,B,Facts), "U", rows(C), cols(C), alpha, 
              compute(A with Facts), LD(A), compute(B with Facts), LD(B), beta,
              compute(C with Facts), LD(C)) 
              if 
                  Facts => A is symmetric or Facts => B is symmetric .

    *** This has issues. BLAS over-writes solution onto B. need to make copy
    crl [TRSM] : compute(A \ (alpha B) with Facts) 
            => TRSM("L", UPLO(A with Facts), TRANS(A), DIAG(A with Facts),
            rows(B), cols(B), alpha, compute(A with Facts), LD(A), 
            compute(B with Facts), LD(B))
            if
                A is triangular <= Facts .

    ops T R S U V : -> MatrixSymbol .
    eq U = matrix('U, 10 by 10) . 
    eq V = matrix('V, 10 by 10) . 
    eq T = matrix('T, 10 by 10) . 
    eq R = matrix('R, 10 by 5) . 
    eq S = matrix('S, 10 by 5) .
    op gamma : -> Float . 
endm

search [10, 10] compute(3.0 T R + 2.0 S with no-knowledge) =>! A:Array .
search [100, 100] compute(T \ (gamma R)  with T is lower-triangular) 
        =>! A:Array .
search [10, 10] compute(3.0 transpose(T) R + 2.0 S with R is symmetric ) 
        =>! A:Array .
***search [100, 100] compute(U transpose(U) V + 3.0 V + 3.0 transpose(T) R + 2.0 S) =>! A:Array .

