load ../algebra.maude

fmod TEST is  
    protecting MATRIX-ALGEBRA .  

    ops W X Y Z A : -> MatrixSymbol .
    ops n m k : -> Int .
    eq W = matrix('W, n by k) .
    eq X = matrix('X, n by m) .
    eq Y = matrix('Y, m by k) .
    eq Z = matrix('Y, k by n) .
    eq A = matrix('A, 1 by n) .

    var v : Vector .
    var rv : RowVector .
    op isVector : Vector -> Bool .
    eq isVector(v) = true .
    op isRowVector : RowVector -> Bool .
    eq isRowVector(rv) = true .

    ops a b c : -> Float .
endfm 

red in TEST : shape(X) == n by m .
red in TEST : rows(X) == n .
red in TEST : cols(X) == m .
red in TEST : shape(X Y) == (n by k) .
red in TEST : (shape(transpose(X))) == (m by n) .
red in TEST : shape(W \ X) == k by m .
red in TEST : shape(a X) == shape(X) .
red in TEST : shape(2.0 X) == shape(X) .

red in TEST : valid(X Y Z) .
red in TEST : valid(Y X) == false .
red in TEST : valid(X Y + transpose(Z)) .
red in TEST : valid(a X Y) .

red in TEST : valid(W \ X) .

red in TEST : isVector(transpose(A)) .
red in TEST : isRowVector(A) .
red in TEST : isVector(transpose(A X)) .

red in TEST : isVector(a transpose(A)) .

red in TEST : 5.0 3.0 == 15.0 .

red in TEST : I A == A .
red in TEST : X Y I Z == X Y Z .
