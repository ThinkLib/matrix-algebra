load simplify.maude

fmod COMPUTE is 
    protecting MATRIX-SIMPLIFY .
    protecting STRING .
    protecting FLOAT .

    sorts Array Statement Assignment Variable Expression .
    subsort Array MatrixSymbol < Variable .
    subsort Variable < Expression .
    subsort Expression Assignment < Statement .

    op _=_ : Variable Expression -> Assignment .
    op copy : Variable -> Variable .

    sort Statements .
    subsort Statement < Statements .
    op _;_ : Statements Statements -> Statements [ctor assoc prec 100] .

    sorts Computation Computations .
    subsort Computation < Computations .
    op __ : Computations Computations -> Computations [ctor assoc id: no-work  prec 100] .
    op do_where_ : Statements Computations -> Computation .
    op do_; : Statements -> Computation .
    op no-work : -> Computations .

    *** A computation to compute MatrixExpr and store it in Variable
    op compute : Variable MatrixExpr -> Computation .

    vars X Y Z : MatrixExpr .
    var S : MatrixSymbol .
    vars alpha beta : Float .
    var Facts : Context .
    var v : Variable .

    ops A B C D : -> Array .
    op GEMM : Float Array Array Float Array -> Statement .
    eq compute(v, alpha X Y + beta Z) = 
    do
        v = copy(C) ; GEMM(alpha, A, B, beta, v)
    where 
        compute(A, X)
        compute(B, Y)
        compute(C, Z) .

    op TRSM : Array Float Array -> Statement .
    eq compute(v, X \ alpha Y) = 
    do 
        v = copy(B) ; TRSM(A, alpha, B)
    where
        compute(A , X)
        compute(B , Y) .
    
    eq compute(v, S) = do v = S ; .
endfm

fmod TEST is 
    protecting COMPUTE .

    ops X Y Z : -> MatrixSymbol .
    op v : -> Variable . 
    ops a b : -> Float .

endfm

red in TEST : compute(v, a X Y + b Z) .
red in TEST : compute(v, X \ a Y) .
red in TEST : compute(v, X \ a (Z Y + X)) .

